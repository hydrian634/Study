--나이가 회원의 평균 나이보다 많은 회원들을 검색
--나이가 30보다 많은 회원 검색
SELECT * FROM MEMBER;
SELECT * FROM MEMBER WHERE AGE > 30;
SELECT * FROM MEMBER WHERE AGE > (SELECT AVG(AGE) FROM MEMBER);

SELECT AVG(AGE) FROM MEMBER;

--회원의 나이가 30 이상인 회원 중에서 나이가 가장 작은 나이의 회원(들)을 검색
SELECT MIN(AGE) FROM MEMBER WHERE AGE >= 30;

SELECT * FROM MEMBER WHERE AGE = (SELECT MIN(AGE) FROM MEMBER WHERE AGE >= 30);

SELECT *FROM MEMBER WHERE AGE < ANY(SELECT AGE FROM MEMBER WHERE AGE > 30);
-- 'sal > 950 OR sal > 3000 OR sal > 1250'  와 동일하다.
-- 즉 AGE < SELECT AGE FROM MEMBER WHERE AGE > 30이 계속 반복되는 것인데, 30보다 큰 32부터 100까지 비교하여 OR연산이 들어가는 것이다.
-- 따라서 위의 구문은 100을 제외한 나머지가 나오는 것.
SELECT * FROM MEMBER WHERE AGE <= ALL(SELECT AGE FROM MEMBER WHERE AGE > 30);
--ALL 최대값????
--ANY 최소값???????
--https://2ham-s.tistory.com/113
SELECT * FROM MEMBER WHERE AGE <= ALL(SELECT AGE FROM MEMBER WHERE AGE > 30) AND ROWNUM = 1;

-- 동갑이 없는 회원들을 검색(AGE가 겹치지 않는 회원들)
--SELECT * FROM MEMBER WHERE AGE != (SELECT AGE FROM MEMBER);
SELECT * FROM MEMBER WHERE AGE = ANY(SELECT AGE FROM MEMBER group by AGE HAVING COUNT(AGE) = 1);
SELECT AGE, COUNT(AGE) FROM MEMBER group by AGE HAVING COUNT(AGE) < 2;

SELECT * FROM MEMBER WHERE AGE = ANY(SELECT AGE FROM MEMBER GROUP BY AGE HAVING COUNT(AGE) = 1);

SELECT AGE FROM MEMBER GROUP BY AGE;
--GROUP BY는 하나 이상의 값을 가진 녀석을 하나의 공통성을 가지고(=같은 값들끼리 = 중복을 제외해주는) 묶어 주는 녀석이다.
--그러니까 AGE 하나로 GROUP BY 해도 문제가 없는 것.
SELECT AGE FROM MEMBER;

SELECT * FROM MEMBER WHERE AGE != ALL(SELECT AGE FROM MEMBER GROUP BY AGE HAVING COUNT(AGE) >= 2);
(SELECT AGE FROM MEMBER GROUP BY AGE HAVING COUNT(AGE) <= 1);

SELECT * FROM MEMBER WHERE AGE IN (SELECT AGE FROM MEMBER GROUP BY AGE HAVING COUNT(AGE) < 2);

SELECT * FROM MEMBER;
SELECT * FROM NOTICE;

SELECT 
    ID, 
    TITLE, 
    REG_MEMBER_ID, 
    (SELECT NAME FROM MEMBER WHERE ID = REG_MEMBER_ID) AS REG_MEMBER_NAME, 
    (SELECT AGE FROM MEMBER WHERE ID = REG_MEMBER_ID) AS REG_MEMBER_AGE
FROM NOTICE;

SELECT * FROM MEMBER INNER JOIN NOTICE ON MEMBER.ID = NOTICE.REG_MEMBER_ID;

SELECT * FROM MEMBER LEFT OUTER JOIN NOTICE ON MEMBER."ID" = NOTICE.REG_MEMBER_ID;
SELECT * FROM MEMBER RIGHT OUTER JOIN NOTICE ON MEMBER."ID" = NOTICE.REG_MEMBER_ID;
SELECT * FROM MEMBER FULL OUTER JOIN NOTICE ON MEMBER."ID" = NOTICE.REG_MEMBER_ID;

SELECT * FROM MEMBER;
SELECT * FROM NOTICE;

SELECT MEMBER.ID, MEMBER.NAME, COUNT(NOTICE.ID) COUNT 
FROM MEMBER 
LEFT OUTER JOIN NOTICE
ON MEMBER.ID = NOTICE.REG_MEMBER_ID
GROUP BY MEMBER.ID, MEMBER.NAME;
--MEMBER TALBE에 있는 모든 사람의 게시물 수 조회, NULL 제외, 30개 출력
SELECT MEMBER.ID, MEMBER.NAME, COUNT(NOTICE.ID) COUNT 
FROM MEMBER 
RIGHT OUTER JOIN NOTICE
ON MEMBER.ID = NOTICE.REG_MEMBER_ID
GROUP BY MEMBER.ID, MEMBER.NAME;
--NOITCE TABLE에 있는 게시물의 수 조회, NULL 포함, 13개 출력
SELECT MEMBER.ID, MEMBER.NAME, COUNT(NOTICE.ID) COUNT 
FROM MEMBER 
FULL OUTER JOIN NOTICE
ON MEMBER.ID = NOTICE.REG_MEMBER_ID
GROUP BY MEMBER.ID, MEMBER.NAME;
--양쪽 테이블에 있는 모든 사람의 모든 게시물 수 조회, NULL 포함. 31개 출력

SELECT * FROM MEMBER CROSS JOIN NOTICE WHERE MEMBER.ID = 1011;
--개인의 모든 글을 출력하는데 이용할수 있을 듯 . 아니야 시발 그냥 진짜 다 곱해버리는거였어.

SELECT C.ID, C.NAME, P.PARENT_ID, P.NAME PARENT_NAME
FROM CATEGORY C
JOIN CATEGORY P
ON P.ID = C.PARENT_ID
WHERE C.PARENT_ID = 1;

SELECT * FROM CATEGORY;


