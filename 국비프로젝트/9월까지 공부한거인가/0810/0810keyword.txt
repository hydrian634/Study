캡슐화
데이터와 그것을 이요하는 함수를 묶어놓는 것 = 해당 묶음에 책임을 부여하는 것 = 책임 부여X = 캡슐화 X = 메인이 모든 코드 구현

콜백함수
callback 함수 : 조금 있다가 알려줘
 자신이 사용하는 캡슐에게 책임을 나누고 그 책임이 끝나는 시점을 알고 싶은 떄를 알려달라고 할 때 위임하는(넘겨주는) 함수.
 
콜백함수 사용 이유
 다른 캡슐을 이용하려고 하는데, 내가 지금 그 캡슐의 기능이 필요하면 바로 메소드를 호출하면 된다.
 그런데 그 일을 맡긴 후에 그 일이 끝낫는지를 알고 싶다면 전화하게 해야한다.
 그 전화가 CallBack이다. 그 전화를 대신하는 구현체가 함수 위임이다.
 그래서 CallBack을 때로는 위임함수(=delegation function)
 
 비동기 : 순서 없음. not in line. 
 비동기를 활성화(새로운 타임라인?을 만드는) 하는 작업은 쓰레드 또는 프로세스를 통해 활성화한다. JS에서는 이벤트를 통해 활성화한다.
 동기 : 코드, 작성된 코드가 있으면 그것은 "순서를 가지고" 실행된다. = 순차적으로 실행된다. in line 
 
비동기적으로 실행하는 도중 같이 있어야 실행되는 코드가 서로 다른 타임라인에 있는 경우 어느 쪽이 먼저 끝날지 모르기 때문에 먼저 끝나는 쪽이? 
다른 함수를 호출하는 것이다. 이것이 callback?

어느 녀석이 먼저 끝날지 모름 -> 끝나는 녀석이 다른 녀석한테 콜 함.-> 다른 녀석이 아직 안끝났으면 먼저 끝난 녀석이 된거고, 언제 끝남 하는건가?
어느 녀석이 먼저 끝날지 모름 -> 끝나는 녀석이 다른 녀석한테 콜 함.-> 다른 녀석이 아직 안끝났으면 그 녀석이 나중에 먼저 끝난 녀석에게 콜을 한다?


이벤트
 내가 다른 캡슐에게 일을 맡기고 그 일이 언제 끝날지 궁금해한다면 그 일이 끝나는 사건이 곧 이벤트다.(CallBack에서의 이벤트)
 내가 알고 싶은 일이 있는데 그 일이 언제 일어날지 모른다. 그러나 그 일이 정말로 일어난다면 사건, 즉 이벤트라고 한다.
 
이벤트 객체
 이벤트에 대한 자세한 정보를 가지는 객체.
 
 