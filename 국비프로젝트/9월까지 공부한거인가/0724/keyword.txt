코드의 간소화

가독성이 떨어지고 알아보기 어렵다 = 이해하기 어렵다

2 : 객체가 많아져 어쩌구저쩌구

3.다름.
데이터 구조화 - 관련된 데이터를 묶고, 개념화 시킨 것이 Entity. 그것을 정의해서 코드를 쉽게 이해할 수 있도록 한다. 데이터 구조 정의, 저장, 방법 결정.
코드 구조화 - 프로그램의 흐름을 효율적으로 만드는것, 사람이 이해하기 쉽도록 만드는 것. 
코드 구성: 코드 구성은 프로그램의 동작과 기능을 정의하는 명령과 논리를 작성하고 구성하는 프로세스를 말합니다. 여기에는 알고리즘 생성, 프로그래밍 구성 사용, 특정 작업 및 작업을 달성하기 위한 제어 흐름 설계가 포함됩니다.
데이터 구성: 반면에 데이터 구성은 프로그램이 조작하는 데이터를 구성하고 나타내는 것과 관련이 있습니다. 여기에는 데이터 구조 정의, 데이터 저장 및 액세스 방법 결정, 서로 다른 데이터 요소 간의 관계 설정이 포함됩니다.


4. 클래스 안에 서로 연관있는 속성과 기능들을 하나의 캡슐(capsule)로 만들어 데이터를 외부로부터 보호하는 것



6. JavaScript에서 기본 데이터 타입을 제외한 모든 것이 객체.
-객체가 만들어지기 위해서는 자신을 만드는데 사용된 원형은 프로토타입 객체를 이용하여 객체를 만든다.
-이때 만들어진 객체 안에 __proto__ 속성이 자신을 만들어낸 원형을 의미하는 프로토타입 객체를 참조하는 숨겨진 링크가
있는데, 이것을 프로토타입이라고 한다.
-----------------------
프로토타입 객체 
함수를 정의하면 다른 곳에 생성되는 프로토타입 객체는 자신이 다른 객체의 원형이 되는 객체.
모든 객체는 프로토타입 객체에 접근 가능하다.
-프로토타입 객체도 동적으로 런타임에 멤버 추가 가능.
-같은 원형을 복사로 생성된 모든 객체는 추가된 멤버를 사용할 수 있음.

생성자 함수의 프로토타입 속성: JavaScript에서 모든 생성자 함수에는 "프로토타입"이라는 특별한 속성이 있습니다. 이 속성은 해당 생성자가 키워드와 함께 사용될 때 새 개체를 만들기 위한 청사진 역할을 하는 개체입니다 new. 프로토타입 속성은 해당 생성자를 사용하여 생성된 모든 인스턴스가 상속할 공유 속성 및 메서드를 정의하는 데 사용됩니다.

프로토타입 객체는 새로운 객체가 생성되기 위한 원형이 되는 객체입니다. 같은 원형으로 생성된 객체가 공통으로 참조하는 공간입니다.
원래의 형태 또는 전형적인 예, 기초 또는 표준.


7. 
상태의 보존: Prototype 패턴은 객체를 복제하는 데 사용됩니다. 어떤 객체의 상태를 캡슐화하고 이를 복사하여 새로운 객체를 생성하는 데에 활용됩니다. 이렇게 함으로써 새로운 객체가 기존 객체와 독립적으로 동작할 수 있으며, 기존 객체의 상태를 보존할 수 있습니다.

새로운 객체 생성의 효율성: 객체를 새로 생성하는 데에는 많은 비용이 들 수 있습니다. Prototype 패턴을 사용하면 기존 객체를 복제하여 새로운 객체를 생성하기 때문에 객체 생성 과정에서의 비용을 절약할 수 있습니다.

유연성과 확장성: Prototype 패턴을 사용하면 객체 생성에 필요한 복잡한 과정을 캡슐화하여 새로운 객체의 생성 방식을 유연하게 변경할 수 있습니다. 즉, 새로운 객체 생성 로직을 담고 있는 클래스의 변경 없이도 다양한 타입의 객체를 생성할 수 있습니다.

독립적인 클라이언트 코드: Prototype 패턴을 사용하면 클라이언트 코드가 객체 생성에 대해 걱정할 필요가 없습니다. 단순히 원본 객체를 복제하여 사용하면 되기 때문에 클라이언트 코드가 더 간결하고 단순해집니다.