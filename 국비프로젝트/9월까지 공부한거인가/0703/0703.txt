오버로딩
//같은 이름으로 생성자나 메소드를 생성하되 인자를 서로 다르게 부여하여 메소드를 정의할 수 있는 것.

재귀함수
//자기 자신을 자기 자신에 호출하여 반복연산이 가능하게 하는 함수. 반복문과 기능이 같지만
//굳이 반복문 자체를 선언할 필요가 없으며 변수를 굳이 선언할 필요가 없다.
//단, 스택오버플로우가 발생할 수 있고, 반복문을 사용하는 경우보다 연산력이 더 필요하다.

객체지향 프로그래밍
현실세계를 추상화하여 컴퓨터로 가져와 소프트웨어를 개발하는 방법.
	//모델링하여 
1. 캡슐화 : 캡슐약처럼 클래스를 속이 보이지 않게 하며 보호하기 위한 방법
2. 상속 : 부모 클래스와 자식 클래스로 이루어지며 자식클래스는 부모클래스를 상속받아 재사용성을 높이고 시간의 단축을 야기,
 수정, 삭제, 추가 등의 작업을 거쳐 더 좋은 코드를 작성한다.
3. 다형성 형태가 다양하다??? 아무리봐도 이해가 안가네

절차지향 vs 객체지향
절차지향 : 컴퓨터의 처리구조와 유사하여 실행속도가 빠르다. = 코드를 읽어들이기 수월하다.
	단점 : 코드의 순서가 정해져 있어 순서가 바뀌는 경우 동일한 결과를 보장하기 어렵다.

객체지향 : 재사용성이 뛰어나다, 신뢰성이 높다, 등등
	단점 : 절차지향보다 실행속도가 느리다, 설계하는 시간이 길어진다.

접근제어자 = 접근제한자
public : 누구나
private : 같은 클래스 내
protected : 같은 패키지 내
에서만 해당 코드를 사용이 가능하다.
