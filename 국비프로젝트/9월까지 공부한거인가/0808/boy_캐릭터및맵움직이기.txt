export default class Boy{
    #x
    #y
    #img
    #imgwalkingIndex
    #walkingDelay
    #isWalking
    #imgdirection
    #moveUp
    #moveDown
    #moveLeft
    #moveRight
    #speed

    constructor(x=0, y=0){
        this.#x = x
        this.#y = y
        this.#img = document.querySelector("#boy")
        this.#imgwalkingIndex = 0
        this.#walkingDelay = 0
        this.#isWalking = false
        this.#imgdirection = 0
        this.#speed = 5

        // x, y 값을 증감하기위한 상태값
        this.#moveUp = false
        this.#moveDown = false
        this.#moveLeft = false
        this.#moveRight = false
    }

    moveTo(direction){
        switch(direction){
            case "up" : 
                this.#imgdirection = 2
                this.#moveUp = true
                break;
            case "down" :
                this.#imgdirection = 0
                this.#moveDown = true
                break;
            case "left" :
                this.#imgdirection = 1
                this.#moveLeft = true
                break;
            case "right" :
                this.#imgdirection = 3
                this.#moveRight = true
                break;
        }

    this.#isWalking = true
    }

    stop(direction){
        switch(direction){
            case "up" : 
                this.#moveUp = false
                break;
            case "down" :
                this.#moveDown = false
                break;
            case "left" :
                this.#moveLeft = false
                break;
            case "right" :
                this.#moveRight = false
                break;
        }
        // 키 동시 입력시 멈추는 현상을 없애기
        this.#isWalking = this.#moveUp || 
                        this.#moveDown ||
                        this.#moveLeft || 
                        this.#moveRight;
        if (!this.#isWalking){
            this.#isWalking = false
            this.#imgwalkingIndex = 0 // 멈추면 차렷 자세 하기
            this.#imgdirection = 0 // 멈추면 무조건 정면 보게 하기
        }   // stop에서 검사하면 키를 뗄데마다 검사,
        // update에서 검사하면 인터벌마다 매번 검사함. 효율이 떨어짐
    }
    
    update(){
        if(!this.#isWalking){ //else if나 else는 안쓰는게 좋음. 어려워지기때문
            return;
        }    

        // 이동에 대한 코드
        if(this.#moveUp) this.#y-=this.#speed
        if(this.#moveDown) this.#y+=this.#speed
        if(this.#moveLeft) this.#x-=this.#speed
        if(this.#moveRight) this.#x+=this.#speed

        // 걷는 동작에 대한 코드
        if(this.#isWalking && this.#walkingDelay == 0){
            this.#imgwalkingIndex++
            this.#walkingDelay = 10
        }
        this.#imgwalkingIndex %= 4
        this.#walkingDelay--

        if(this.#x <= 12){
            this.#x = 12
        }
        if(this.#x >= 900-12){
            this.#x = 900-12
        }
        if(this.#y <= 0+12){
            this.#y = 0+12
        }
        if(this.#y >= 700-24){
            this.#y = 700-24
        } // 캔버스 밖으로 못나가게 하는 코드
    }

    /** @param {CanvasRenderingContext2D} ctx */
    draw(ctx){
        // 변수로 너비 높이를 설정하는게 유지보수에 좋겠다.
        let sw = 48 // 소스 너비(캐릭터 설정), 뒤 숫자에 따라 어느 캐릭터가 움직일지 정해짐
        let sh = 48 // 소스 높이(캐릭터 설정, 소스 따오기-어느캐릭터를 선택할지 결정)
        let dw = 48 // 캐릭터 너비, 그려지는 캐릭터의 크기를 결정
        let dh = 48 // 캐릭터 높이
        // ctx.drawImage(this.#img, this.#x, this.#y)
        // ctx.drawImage(this.#img, 0, 0, 48, 48, this.#x, this.#y, 48*4, 48*4)
        // ctx.drawImage(this.#img, 0, 0, 48, 48, this.#x, this.#y, 48, 48)
        // ctx.drawImage(this.#img, 48*3, 0, 48, 48, this.#x+48, this.#y+48, 48*2, 48*2) 
        // 다른 좌표애를 그리면 이동하면 같이 움직임

        // 중심축 옮기기
        ctx.drawImage(
            this.#img,
            sw*this.#imgdirection,
            sh*this.#imgwalkingIndex,
            dw,
            dh,
            this.#x-dw/2,
            this.#y-dh/2,
            dw,
            dh
        )
        // ctx.arc(this.#x, this.#y, 4, 0, Math.PI*2) // 중심축을 그려서 위치 확인해보기
        // ctx.strokeStyle = "red"
        // ctx.stroke()
    }

    get x(){
        return this.#x;
    }
    get y(){
        return this.#y;
    }
    get isWalking(){
        return this.#isWalking;
    }
    get speed(){
        return this.#speed;
    }

}