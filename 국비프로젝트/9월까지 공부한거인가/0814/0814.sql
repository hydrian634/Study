SELECT FLOOR(AGE/10)*10 AGES, COUNT(AGE) COUNT FROM MEMBER GROUP BY FLOOR(AGE/10)*10 HAVING FLOOR(AGE/10)*10 IS NOT NULL ORDER BY AGES ASC;

SELECT COUNT(AGE) FROM MEMBER; --NULL값은 자연스럽게 빠진다.

SELECT SUM(AGE) FROM MEMBER;

--실행 순서
-- FROM -> CONNECT BY ->  WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY


SELECT *
FROM MEMBER
WHERE AGE < 200;

SELECT * FROM NOTICE;

SELECT SYSDATE, SYSTIMESTAMP FROM DUAL;

COMMIT;

SELECT REG_MEMBER_ID, COUNT(ID) AS REG_COUNT FROM NOTICE GROUP BY REG_MEMBER_ID ;

SELECT REG_MEMBER_ID AS MEMBER_ID, COUNT(ID) REG_COUNT
FROM NOTICE
GROUP BY REG_MEMBER_ID
HAVING COUNT(ID) >= 2
ORDER BY COUNT(ID) DESC;

SELECT * FROM NOTICE WHERE ROWNUM BETWEEN 1 AND 10;
SELECT * FROM (SELECT NOTICE.*, ROWNUM AS RNUM FROM NOTICE) WHERE RNUM BETWEEN 11 AND 20;
--ROW는 예약어라서 안됨. "ROW"로 사용해야 됨.

SELECT * FROM (SELECT NOTICE.*, ROWNUM AS RNUM FROM NOTICE) WHERE RNUM BETWEEN 11 AND 20 ORDER BY REG_DATE DESC;

SELECT * FROM (SELECT ROWNUM AS RNUM, NOTICE.* FROM NOTICE ORDER BY ID DESC) WHERE RNUM BETWEEN 11 AND 20;

--ID는 이미 정렬된 순서이기 때문에 그러니까 자체가 정렬된 순서이기 때문에 ROWNUM으로 정렬해도 정상적으로 나옴.

SELECT * FROM NOTICE ORDER BY ID ASC;
SELECT * FROM NOTICE ORDER BY ID DESC;
SELECT * FROM NOTICE ORDER BY REG_DATE ASC;



SELECT ROWNUM AS RNUM, NOTICE.* FROM NOTICE ORDER BY ID DESC;

SELECT * FROM (SELECT ROWNUM AS NUM, N.* FROM (SELECT * FROM NOTICE ORDER BY REG_DATE DESC)N)WHERE NUM BETWEEN 11 AND 20 AND REG_DATE IS NOT NULL;

COMMIT;

INSERT INTO NOTICE (ID) VALUES (7);
ROLLBACK;

--나이가 회원의 평균 나이보다 많은 회원들을 검색
--나이가 30보다 많은 회원 검색
SELECT * FROM MEMBER;
SELECT * FROM MEMBER WHERE AGE > 30;
SELECT * FROM MEMBER WHERE AGE > (SELECT AVG(AGE) FROM MEMBER);

